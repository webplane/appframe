{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction and Installation # Appframe is an open source python library that reduces the code and complexity of developing command line applications. It handles most of the low level logic while enforcing a modular architecture. Features # 2 lines of code for the main function Composition of the CLI commands from a commands/ directory Appframe leverages the follwing greate libraries: https://pypi.org/project/cleo/ https://pypi.org/project/simple-plugin-loader/ Installation # Appframe is avaiable from the official Python Package Index (PIP), you can install it from the terminal: pip install appframe Hello World # main.py import appframe appframe . main ( __name__ , __file__ , \"test-app\" , \"0.1\" ) commands/hello.py from appframe import Command , verbose class CreateCommand ( Command ): \"\"\" Greet a person greet {person? : name of the person to greet} \"\"\" def handle ( self ): person = self . argument ( \"person\" ) or \"Peter\" verbose ( 1 , \"Greeting person\" ) print ( f \"Hello { person } \" ) Test the app: python test.py greet Joe","title":"Introduction and Installation"},{"location":"#introduction-and-installation","text":"Appframe is an open source python library that reduces the code and complexity of developing command line applications. It handles most of the low level logic while enforcing a modular architecture.","title":"Introduction and Installation"},{"location":"#features","text":"2 lines of code for the main function Composition of the CLI commands from a commands/ directory Appframe leverages the follwing greate libraries: https://pypi.org/project/cleo/ https://pypi.org/project/simple-plugin-loader/","title":"Features"},{"location":"#installation","text":"Appframe is avaiable from the official Python Package Index (PIP), you can install it from the terminal: pip install appframe","title":"Installation"},{"location":"#hello-world","text":"main.py import appframe appframe . main ( __name__ , __file__ , \"test-app\" , \"0.1\" ) commands/hello.py from appframe import Command , verbose class CreateCommand ( Command ): \"\"\" Greet a person greet {person? : name of the person to greet} \"\"\" def handle ( self ): person = self . argument ( \"person\" ) or \"Peter\" verbose ( 1 , \"Greeting person\" ) print ( f \"Hello { person } \" ) Test the app: python test.py greet Joe","title":"Hello World"},{"location":"application-directory/","text":"Webplane Application Directory # The application directory contains all the artifacts that are required by an application. Each directory at the top level represents a feature, when an application is started the webplane engine will run the initialization code associated with each feature. The content of the folder will be used as described on the feature documentation below. Application Features # Each directory at the top level is associated with a feature, all features are optional. Directory Description boot Python modules with a boot() function, invoked when the application starts modules Python modules that can be imported from other features http Static files or web request handlers to be served via HTTP tools CherryPy tools that will be imported and enabled for the application http Content # The http directory content is scanned and processed according to the following rules: If a top level file with name .static , each line on it will identify a file or directory which will be associated with a static content handler Filenames with a leading underscore (_) are skipped, they can be referenced while processing other files. Files with extension .html will be associated with a JinjaController if there is a _base.html file , this base file will be rendered using the main html file for the content if there is a corresponding .yaml file, its rendering will be extended to the template rendering arguments if there is a corresponding .py , the python module render()* will be invoked and the resulting dict will extended to the template rendering arguments Files with extension .py will be imported as Controller modules . If both .html and a .py files for the same base, the python module will be imported as a Renderer module.","title":"Application Directory Layout"},{"location":"application-directory/#webplane-application-directory","text":"The application directory contains all the artifacts that are required by an application. Each directory at the top level represents a feature, when an application is started the webplane engine will run the initialization code associated with each feature. The content of the folder will be used as described on the feature documentation below.","title":"Webplane Application Directory"},{"location":"application-directory/#application-features","text":"Each directory at the top level is associated with a feature, all features are optional. Directory Description boot Python modules with a boot() function, invoked when the application starts modules Python modules that can be imported from other features http Static files or web request handlers to be served via HTTP tools CherryPy tools that will be imported and enabled for the application","title":"Application Features"},{"location":"application-directory/#http-content","text":"The http directory content is scanned and processed according to the following rules: If a top level file with name .static , each line on it will identify a file or directory which will be associated with a static content handler Filenames with a leading underscore (_) are skipped, they can be referenced while processing other files. Files with extension .html will be associated with a JinjaController if there is a _base.html file , this base file will be rendered using the main html file for the content if there is a corresponding .yaml file, its rendering will be extended to the template rendering arguments if there is a corresponding .py , the python module render()* will be invoked and the resulting dict will extended to the template rendering arguments Files with extension .py will be imported as Controller modules . If both .html and a .py files for the same base, the python module will be imported as a Renderer module.","title":"http Content"}]}